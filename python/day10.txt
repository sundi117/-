day09回顾:
  传参
    把数据传递给函数

    传递方式:
      位置传参
        序列传参
      关键字传参
        字典关键字传参

  形参:
    把调用函数的实参拿到(接收实参)
      形参的定义方式有四种:
        位置形参
        *元组形参(接收多余的位置传参)
        命名关键字形参(强制必须使用关键字传参)
        ** 字典形参(接收多余的关键字传参)
    函数的缺省参数 default argument  
        def fx(a, b=0, c=100):
            pass

全局变量  和 局部变量 

在函数内赋值语句
   变量 = 表达式



globals() / locals()函数:
  globals() 返回当前全局作用域内变量的字典
  locals()  返回当前局部作用域内变量的字典

示例见:
  globals_locals.py

函数变量
  函数名是变量，它在def 语句创建函数时绑定一个函数

示例见:
  function_variable.py



一个函数 可以作为另一个函数的实参传递
示例见:
  give_function_as_args.py
  give_function_as_args2.py

看懂如下代码:
  def myinput(fn):
      L = [5, 3, 1, 9, 7]
      return fn(L)

  print(myinput(max))
  print(myinput(min))
  print(myinput(sum))
  print(myinput(len))



函数可以作为另一个函数的返回值
  示例见:
    return_function.py




函数的嵌套定义
  函数嵌套定义是指一个函数里用def语句来创建其它的函数的情况

  示例:
    def fn_outter():
        print("fn_outter被调用")
        def fn_inner():
            print("fn_inner被调用")
        fn_inner()
        fn_inner()
        print("fn_outter调用结束")

    fn_outter()






练习:
  写一个计算公式的解释执行器
    已知有如下一些函数：
        def myadd(x, y):
            return x + y
        def mysub(x, y):
            return x - y
        def mymul(x, y):
            return x * y
    写一个函数，传入字符串，返回相应的函数
        def get_op(s):
            # 此函数根据字符串来返回相应的函数.
            # 如果传入字符串"加" 则返回myadd函数
            # ....        '乘',则返回mymul函数
            ... 此处自己实现 
    主程序如下:
        while True:
          s = input("请输入计算公式: ")# 10 加 20
          L = s.split()
          a = int(L[0])
          b = int(L[2])
          fn = get_op(L[1])
          print("结果是:", fn(a, b))  # 30



python 的作用域
  作用域也叫名字空间，是访问变量时查找变量名的范围空间

python的四个作用域:
  作用域               英文解释          英文缩写
局部作用域(函数内)    Local(function)         L
外部嵌套函数作用域 Enclosing function locals  E
函数定义所在模块(文件)作用域  Global(module)   G
Python内建模块的作用域      Builtin(Python)   B

示例见:
  namespace.py

变量名的查找规则
  在变量访问时，先查找本地变量，然后是包裹此函数外部的函数内部的变量，之后是全局变量，最后是内建变量
    即：
      L ----> E ----> G ----> B
    在默认的情况下，变量名赋值会创建或者改变当前作用域的变量




global 语句
  作用:
    1. 告诉解释执行器 global 语句声明的一个或多个变量，这些变量的作用域为模块级的作用域，也称作全局变量
    2. 全局声明(global)将赋值语句操作的变量映射到模块文件内部的作用域

  语法:
    global 变量1, 变量2, ...
  示例见:
    global.py
  说明:
    1. 全局变量如果要在函数内部被赋值，则必须经过全局声明（否则会被认为是创建局部变量)
    2. 全局变量在函数内部不经过声明就可以直接访问(变量已经存在并关联一个对象)
    3. 不能先声明局部变量，再用global声明为全局变量，此做法不附合规则
    4. global变量列表里的变量名不能出现在此作用域的形参列表里


练习:
  写一个函数叫hello(name),部分代码如下:
  count = 0
  def hello(name):
      print('你好', name)
      ... 此处代码省略,需要同学们自己填写
      ... 此处代码需要改变全局变量来记录此函数曾经被调用过多少次.
  
  hello('小张')
  hello('小李')
  print('hello 函数被调用', count, '次')  # 2次





nonlocal 语句
  作用:
    告诉解释执行器，nonlocal声明的变量不是局部变量，也不是全局变量，它是外部嵌套函数内的变量

  语法:
    nonlocal 变量名1, 变量名2, ....
  示例见:
    nonlocal.py
  说明:
    1. nonlocal 语句只能在被嵌套的函数内部进行使用
    2. 访问nonlocal变量将对外部嵌套函数作用域内的变量进行操作
    3. 当有两层或两层以上函数嵌套时，访问nonlocal变量只对最近的一层变量进行操作
    4. nonlocal语句的变量列表里的变量名，不能出现在此函数的参数列表中





def 语句:
   作用:
     创建函数

lambda 表达式(又称匿名函数)
  作用:
    创建一个匿名函数对象
    同 def 类似,但不提供函数名
  格式:
    lambda : 表达式
  示例见:
    lambda.py
  说明:
    1. lambda 只是一个表达式，它用来创建一个函数对象
    2. 当lambda表达式调用时，先执行冒号(:)后的表达式，并返回表达式的结果的引用关系
    3. lambda 表达式创建的函数只能包含一条表达式
    4. lambda 比函数简单且可以随时创建和销毁，有利于减少程序的偶合度

练习:
  1. 写一个lambda 表达式，判断这个数的2次方+1是否能被5整除，如果能被整除返回True, 否则返回False
     例:
        fa = lambda x: .....
        print(fa(2))  # True
        print(fa(4))  # False

  2. 写一个lambda表达式，求两个变量的最大值
     例如:
        def mymax(x, y):
           ...
        mymax = lambda ...
        print(mymax(100, 200))  # 200



eval() / exec() 函数

  eval(source, globals=None, local=None)  把一个字符串 srouce 当成一个表达式来执行，返回表达式执行的结果

  exec(source, globals=None, locals=None) 把一个字符串source 当成程序来执行

eval示例见:
   eval.py
   eval2.py

exec 示例见:
  exec.py





练习:
  1. 给出一个整数n,写一个函数myfac来计算n!(n的阶乘)
    n! = 1 * 2 * 3 * 4 * ..... * n
    如:
      print(myfac(5))  # 120
  2. 给出一个整数n,写一个函数计算myfn(n):
      1 + 2**2 + 3**3 + .... + n**n的和
    如:
      print(myfn(10)) # ???
  3. 完全数:
     1 + 2 + 3 = 6 (6为完全数)
     1,2,3都为6的因数(因数是能被一个数x整除的整数为y,则y为x的因数)
     1 x 6 = 6
     2 x 3 = 6
     完全数是指除自身以外的所有因数相加之和等于自身的数
     求 4~5个完全数并打印出来
     答案:
       6
       28
       496
       ......



4 实现带有界面的学生信息管理系统
  程序启动时先弹出操作菜单:
    +-------------------------+
    | 1)  添加学生信息          |
    | 2)  显示学生信息          |
    | 3)  删除学生信息          |
    | 4)  修改学生成绩          |
    | q)  退出                 |
    +-------------------------+
    请选择: 1
  要求 ：
      每个选择都要有一个函数来实现
















